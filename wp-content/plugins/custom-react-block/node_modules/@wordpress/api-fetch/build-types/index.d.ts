export default apiFetch;
export type APIFetchMiddleware = import('@wordpress/api-fetch/src/types').APIFetchMiddleware;
export type APIFetchOptions = import('@wordpress/api-fetch/src/types').APIFetchOptions;
export type FetchHandler = (options: import('@wordpress/api-fetch/src/types').APIFetchOptions) => Promise<any>;
/**
 * @template T
 * @param {import('./types').APIFetchOptions} options
 * @return {Promise<T>} A promise representing the request processed via the registered middlewares.
 */
declare function apiFetch<T>(options: import('@wordpress/api-fetch/src/types').APIFetchOptions): Promise<T>;
declare namespace apiFetch {
    export { registerMiddleware as use };
    export { setFetchHandler };
    export { createNonceMiddleware };
    export { createPreloadingMiddleware };
    export { createRootURLMiddleware };
    export { fetchAllMiddleware };
    export { mediaUploadMiddleware };
    export { createThemePreviewMiddleware };
}
/**
 * Register a middleware
 *
 * @param {import('./types').APIFetchMiddleware} middleware
 */
declare function registerMiddleware(middleware: import('@wordpress/api-fetch/src/types').APIFetchMiddleware): void;
/**
 * Defines a custom fetch handler for making the requests that will override
 * the default one using window.fetch
 *
 * @param {FetchHandler} newFetchHandler The new fetch handler
 */
declare function setFetchHandler(newFetchHandler: FetchHandler): void;
import createNonceMiddleware from '@wordpress/api-fetch/src/middlewares/nonce';
import createPreloadingMiddleware from '@wordpress/api-fetch/src/middlewares/preloading';
import createRootURLMiddleware from '@wordpress/api-fetch/src/middlewares/root-url';
import fetchAllMiddleware from '@wordpress/api-fetch/src/middlewares/fetch-all-middleware';
import mediaUploadMiddleware from '@wordpress/api-fetch/src/middlewares/media-upload';
import createThemePreviewMiddleware from '@wordpress/api-fetch/src/middlewares/theme-preview';
//# sourceMappingURL=index.d.ts.map